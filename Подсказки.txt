======== SSH ========
chmod 700 ~/.ssh
chmod 600 ~/.ssh/authorized_keys
ssh-keygen создать ключ ssh
sudo apt install openssh-server
копировать на удалённую машину id_rsa.pub
копировать ssh key user в authorized_keys  пользователя root

========== Разное ==========
pbcopy копировать в буфер обмена
sudo ALL=(ALL:ALL) NOPASSWD:ALL
sudo -s перейтив root
echo "afwfawfawf" >(>>добавить в файл) file1.txt создать файл
wget скачать что-то
usermod -aG sudo sammy добавить пользователя в группу sudo

======== Работа с текстом ======
ctrl+w найти
ctrl+o сохранить

======== UFW ======
ufw фаервол
sudo ufw status статус фаервола
sudo ufw app list Список приложений с которыми работает ФВ
/etc/ufw/applications.d/nginx.ini документ куда снипет вставлять для работы ВФ и nginx
[Nginx HTTP]
title=Web Server
description=Enable NGINX HTTP traffic
port=80/tcp

[Nginx HTTPS] \
title=Web Server (HTTPS) \
description=Enable NGINX HTTPS traffic
ports=443/tcp

[Nginx Full]
title=Web Server (HTTP,HTTPS)
description=Enable NGINX HTTP and HTTPS traffic
ports=80,443/tcp

======= Конфиг для Nginx Рабочий =======
user www-data;
worker_processes auto;
events {} обязательно эта хрень нужна
http { }
gzip on; Архиватор
server { } блок сервера находится в блоке http
listen 80; на каком порту работает
server_name localhost; Имя сервера
root корень сайта
access_log off; Отключить логирования при доступе к сайту
location /text {
        alias /sites/www/mytext/text.txt; это прямая ссылка на сайт
        #root /sites/www/mytext; изменяет корень сайта
        #try_files $uri =404; какая то директива
      } Тоже важный блок

access_log /var/log/nginx/access.log; доспум к логам
error_log /var/log/nginx/error.log; доступ к логам
include mime.types; подтянуть поддержку html txt png и прочее говно.
return 200 'this is call of duty'; вернуть с кодом 200
=======nginx====
nginx -t проверить конфигурацию
systemctl restart nginx перезапуск nginx
========= Команды Гита ========
система контроля версий
git init . локальный гит
git add . добавить все или один файл в репу
git commit -m "message" добавить коммит на файл
git push origin запушить всё это в облако гита
git pull обновить свою репу с облака
(git)Deploy keys это ssh
apt install git установка
git --version версия гита
git config --global user.name "Vladimir Babushkin"
git config --global user.email "my mail"
git config -l все конфигурации гита
.gitconfig файл с настройками
git status  статус гита
git log история гита git log -1 последний коммит
git log -1 -p показать что было сделано
git checkout -- <имя файла> отменить изменения
git diff --staged разница между staged и последним коммитом
.gitignore прописать то что надо игнорировать
git clone сслыка скачать репозитори
git remote -v по какой ссылке скачал репу
git remote set-url origin <ссылка репы> поменять ссылку репозитори.
git branch показать ветки
git branch <branch name>  название ветки
git checkout  <Название ветки> перейти на ветку
git branch -d <Название ветки> удалить ветку
git checkout -b <название ветки> создать ветку и сразу на неё перейти
git merge <название ветки> соеденить сторонную ветку с мастер копией
git branch -D Удалить ветку, даже были мзменения
git checkout <номер хэша> перейти на оперелённую версию( on commit)
git checkout main перейти на последнюю версию
git commit --amend изменение commit не делая новый
git reset --hard HEAD~2 Полностью вернуться на две предыдущие версии убив новейшие
git reset --soft HEAD~4 удалить commit, не изменяя файлы
git push --set-upstream origin создать свою ветку в github удалённо
git push origin --delete <banch name> Удалить ветку удалённо

==========Ansible=========
sudo yum install epel-release скачать репозиторий CentOS
sudo yum install ansible установка ansible CentOs
ansible --version версия Ансибл
sudo apt-add-repository ppa:ansible/ansible добавить репозиторий на Ubuntu
sudo apt install ansible установка ansible Ubuntu
mkdir ansible создать папку для проекта
nano hosts.txt
[staging_servers]
centOS      ansible_host=192.168.20.98 пример содержимого файла hosts.txt ansible_ssh_private_key_file=/home...
nano ansible.cfg файл конфига
[defaults]
host_key_checking = false  отмена проверки отпечатка пальца
inventory         = ./hosts.txt
root ALL=NOPASSWD: ALL
ansible all(группа серверов) -m(модуль) ping(название модуля) пример команды ping на все сервера
ansible-inventory --list список файла hosts.txt
ansible-inventory --graph так же
ansible all -m setup(модуль параметров сервера)
ansible all -m shell -a "uname" пример использваония модуля shell(команды линукс терминала)
ansible all -m shell -a "rm -fr /" Модуль для увольнения с работы
command безопасная версия модуля shell
shell модуль для выполнения команд терминала линукс
file модуль для создания или удаления файлов, создание директории и тд
copy копирование файла
=======Прочее========
-m модуль
-a(аргумент)
-b become  быть sudo
-v verbose дать больше информации
src=источник
dest=назначение
path=путь
state=absent удаление файла или программы state=removed

ansible all -m file -a "path=/home/privet.txt state=absent" -b пример удаления файла
state: directory  для создания директории в playbook
ansible all -m copy -a "src=privet.txt dest=/home mode=777" -b пример копирования файла
content: содержание файлов при использовании модуля copy
get_url скачать что-то по ссылке
ansible all -m get_url -a "url="https://anydesk.com/ru/downloads/linux dest=/home/vladimir" Пример скачивания
yum RedHat apt Debian модуль для установки программ
ansible all -m yum -a "name=gimp state=latest" -b пример установки программы
ansible all -m yum -a "name=gimp state=removed" -b пример удаления программы
service позволяет управлять сервисами
ansible all -m service -a "name=httpd state=started enabled=yes"  пример запуска сервиса при старте
force копировать файл на удаленный хост, если содержимое файла было изменено
uri читать содержимое ссылки
ansible all -m uri -a "url=https://nsau.edu.ru return_content=yes" Отобразить содержимое сайта
vars: переменные для playbook
src={{ source_file }} dest= {{ destin_file }} пример использования переменных в playbook
handlers: Дополнительный таск в случае срабатывания notify
notify: способ вызова handlers
 - name: Copy Index.html to web
   copy: src={{ source_file }} dest={{ destin_file}}
   notyfy: Restart Apache
Пример использования notify, перезапуск веб сервера если изменилось содержимое index

- debug: выдать сообщение var: использовать параметр переменной msg: сообщение
- set_fact: объеденить переменные
при использовании var не использовать фигурные скобки. если используется переменная, нужны скобки
register: сохранить output команды
when: Условие(можно поставить в конце block)
 - name: Install apache
   apt: name=apache2 state=latest
   when: ansible_os_family == "Debian"
- block Блоки
{{ item }} переменная, сохранённое слово
loop: цикл task
 -name: Install many packaged
    yum: name={{ item }} state=latest
    loop:
      - gimp
      - tree
      - mc

until конечный цикл
- name: Loop Until example
  shell: echo -n Z >> myfile.txt && cat myfile.txt
  register: output
  delay: 2
  retries: 10
  until: output.stdout.find("ZZZZ") == false
with_fileglob: "{{ source_folder }}/*.*" скопировать всё содержимое папки
index.j2 создание шаблона в шаблоне используются переменные ansible
template: сгенерировать из шаблона
- name: Generate Index.html file
  template: src={{ source_folder }}/index.j2 dest={{ destin_folder }}/index.html
ansible-galaxy init <название роли> команда для создания ролей
roles: указать вместо tasks, при использовании ролей, указать роль
roles:
 - { role: install_apt, when: ansible_system == 'Linux' } запускать роль, если ОС Линукс
hosts: "{{ myhosts }}" для использования внешних переменных
--extra-var "myhosts=prod_servers" использование внейшней переменной. Наивысший приоритет
include: <file name> импорт файла. Изначально создать файл с параметрами
delegate_to: передать выполнение таска определённому серверу
- name: ping test
  ping:
  delegate_to: Linux1
shell: sleep 3 && reboot now перезагрузка с задержкой в 3 секунды
async: 1 максимальный тайм аут
poll: 0 проверить команду
 - name: Wait host online
   wait_for:
   host: "{{ inventory_hostname }}" ansible var
   state: started нужное состояние
   delay: 5  начинать ждать через 5 секунд
   timeout: 40 максимум жадть 40 секунд
   delegate_to: 127.0.0.1
run_once: true запустить один раз
ignore_errors: yes игнорировать ошибки
 - name: Task 1
   apt: name=treee state=latest
   ignore_errors: yes пример игнорирования ошибки task
failed_when: выдать ошибку если
 tasks:
  - name: task num2
    shell: echo Hello World
    register: results
    failed_when: "'World' in results.stdout"
  - debug:
      var: results
rc return code: 0 выполнено
failed_when: results.rc == 0 запустить ошибку если код 0
any_errors_fatal : true любая ошибка прекращает выполнение playbook
---
- name: errors
  hosts: all
  any_errors_fatal : true
  become: yes
ansible-vault create <имя файла> создать зашифрованный файл
ansible-vault view <имя файла> посмотреть зашифрованный файл
ansible-vault edit <имя файла> редактировать зашифрованный файл
ansible-vault rekey поменять пароль
ansible-vault encrypt <имя файла> зашифровать файл
ansible-vault decrypt <названия файла> расшифровать файл
--ask-vault-pass спросить пароль дешифровки исполняемого файла
ansible-playbook playbook1.yml --ask-vault-pass
--vault-password-file <имя файла> использовать файл с содержимым паролем
ansible-vault encrypt_string зашифровать строчку. После шифрования пароля, запускать с дешифровкой
echo -n "secret" | ansible-vault encrypt_string так же зашифровать слово
==============docker==============
sudo apt install apt-transport-https
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt install docker-ce
sudo systemctl status docker проверить статус службы
sudo usermod -aG docker $USER добавить пользователя в группу докера
docker run hello-world проверить что всё норм
docker -v проверить версию докера
docker images какие есть докер образы
docker pull скачать образ
docker ps показать бегущие контейнеры
docker ps -a все контейнеры которые бежали
docker run(запустить) -it(интерактивно) -p(перенаправить порты) 1234:8080 tomcat(назвае образа)
docker run -d -p 1234:80 hello-world запустить background
docker search найти образ
docker rmi стереть образ
docker rm стереть контейнер
docker cp host_source_path container:destination_path скопировать файл в докер контейнер

#--------mydocker file test
RUN apt-get -y install
FROM задаёт базовый образ
ENV устанавливает постоянные переменные среды
RUN  выполняет команду и создаёт слой образа. Используется для установки в контейнер пакетов
COPY копирует в контейнер файлы и папки
ADD копирует файлы и папки в контейнер. Моежт распаковывать локальные .tar файлы
CMD описывает команду с аргументами, которую нужно будет выполнить когда контейнер будет запущен
WORKDIR задаёт рабочую директорию для следующей инструкции
ARG задаёт переменные для передачи Docker во время сборки образа
ENTRYPOINT предоставляет команду с аргументами для вызова во время выполнения контейнера
EXPOSE указывает необходимость открыть порт
VOLUME создаёт точку монтирования для работы с постоянным хранилищем
==============================
docker build -t <название> . собрать docker image
docker tag vovka:v1 vova:copy создать копию image с новым tag
docker exec -it <номер контейнера> /bin/bash запустить терминал внутри контейнера
docker commit <container ID> vova:v2 пример создания новой версии image на основе существующего
docker login зайти на докер
docker push <repository name>/<image name> запушить на docker hub
docker commit 1a130ee353a9 mattcat1988/apachetest:6 переименовать образ не в локальный и запушить
docker start запустить контейнер
docker stop  остановить контейнер
Обязательно переименовать образ





